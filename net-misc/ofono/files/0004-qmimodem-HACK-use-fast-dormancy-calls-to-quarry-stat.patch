From 8ba7c34a85556ab08edf858cf45bd9a1ec5b5bc5 Mon Sep 17 00:00:00 2001
From: Marius Gripsgard <marius@ubports.com>
Date: Tue, 9 Jun 2020 00:07:37 +0200
Subject: [PATCH 4/4] [qmimodem] HACK, use fast dormancy calls to quarry state

This uses the fast dormancy calls to quarry the current state of both sms and voice calls, this is a hack to allow the modem to get up to date after a deep sleep.
---
 drivers/qmimodem/qmi.c             | 15 +++++++++++++++
 drivers/qmimodem/qmi.h             |  5 +++++
 drivers/qmimodem/radio-settings.c  | 30 ++++++++++++++++++++++++++++++
 drivers/qmimodem/sms.c             | 13 +++++++++++++
 drivers/qmimodem/voice.h           |  1 +
 drivers/qmimodem/voice_generated.c | 13 +++++++++++--
 drivers/qmimodem/voice_generated.h |  2 +-
 drivers/qmimodem/voicecall.c       | 16 +++++++++++++++-
 8 files changed, 91 insertions(+), 4 deletions(-)

diff --git a/drivers/qmimodem/qmi.c b/drivers/qmimodem/qmi.c
index 4cd1530f..5e52eb33 100644
--- a/drivers/qmimodem/qmi.c
+++ b/drivers/qmimodem/qmi.c
@@ -992,6 +992,21 @@ struct qmi_device *qmi_device_new(int fd)
 	return device;
 }
 
+void qmi_device_trigger_update(struct qmi_device *device)
+{
+	struct qmi_result result;
+
+	result.result = 0;
+	result.error = 0;
+	result.message = QMI_SERVICE_UPDATE;
+	result.data = NULL;
+	result.length = 0;
+
+	DBG("");
+
+	g_hash_table_foreach(device->service_list,
+					service_notify, &result);
+}
 struct qmi_device *qmi_device_ref(struct qmi_device *device)
 {
 	if (!device)
diff --git a/drivers/qmimodem/qmi.h b/drivers/qmimodem/qmi.h
index 1202cb35..407ca9d7 100644
--- a/drivers/qmimodem/qmi.h
+++ b/drivers/qmimodem/qmi.h
@@ -58,6 +58,8 @@
 #define QMI_SERVICE_RMS		225	/* Remote management service */
 #define QMI_SERVICE_OMA		226	/* OMA device management service */
 
+#define QMI_SERVICE_UPDATE  400
+
 enum qmi_device_expected_data_format {
 	QMI_DEVICE_EXPECTED_DATA_FORMAT_UNKNOWN,
 	QMI_DEVICE_EXPECTED_DATA_FORMAT_802_3,
@@ -78,6 +80,9 @@ typedef void (*qmi_discover_func_t)(void *user_data);
 
 struct qmi_device *qmi_device_new(int fd);
 
+void qmi_device_trigger_update(struct qmi_device *device);
+
+
 struct qmi_device *qmi_device_ref(struct qmi_device *device);
 void qmi_device_unref(struct qmi_device *device);
 
diff --git a/drivers/qmimodem/radio-settings.c b/drivers/qmimodem/radio-settings.c
index db311aba..ccb92b36 100644
--- a/drivers/qmimodem/radio-settings.c
+++ b/drivers/qmimodem/radio-settings.c
@@ -38,6 +38,8 @@ struct settings_data {
 	struct qmi_service *dms;
 	uint16_t major;
 	uint16_t minor;
+	struct qmi_device *device;
+	bool sleep;
 };
 
 static void get_system_selection_pref_cb(struct qmi_result *result,
@@ -247,6 +249,30 @@ static void create_nas_cb(struct qmi_service *service, void *user_data)
 	ofono_radio_settings_register(rs);
 }
 
+static void qmi_query_fast_dormancy(struct ofono_radio_settings *rs,
+			ofono_radio_settings_fast_dormancy_query_cb_t cb,
+			void *data)
+{
+	struct settings_data *rsd = ofono_radio_settings_get_data(rs);
+	CALLBACK_WITH_SUCCESS(cb, rsd->sleep, data);
+}
+
+static void qmi_set_fast_dormancy(struct ofono_radio_settings *rs,
+				ofono_bool_t enable,
+				ofono_radio_settings_fast_dormancy_set_cb_t cb,
+				void *data)
+{
+	struct settings_data *rsd = ofono_radio_settings_get_data(rs);
+	rsd->sleep = enable;
+
+	if (!enable)
+		qmi_device_trigger_update(rsd->device);
+
+	DBG("");
+
+	CALLBACK_WITH_SUCCESS(cb, data);
+}
+
 static int qmi_radio_settings_probe(struct ofono_radio_settings *rs,
 					unsigned int vendor, void *user_data)
 {
@@ -264,6 +290,8 @@ static int qmi_radio_settings_probe(struct ofono_radio_settings *rs,
 	qmi_service_create_shared(device, QMI_SERVICE_NAS,
 						create_nas_cb, rs, NULL);
 
+	data->device = device;
+
 	return 0;
 }
 
@@ -292,6 +320,8 @@ static const struct ofono_radio_settings_driver driver = {
 	.set_rat_mode	= qmi_set_rat_mode,
 	.query_rat_mode = qmi_query_rat_mode,
 	.query_available_rats = qmi_query_available_rats,
+	.query_fast_dormancy	= qmi_query_fast_dormancy,
+	.set_fast_dormancy	= qmi_set_fast_dormancy,
 };
 
 void qmi_radio_settings_init(void)
diff --git a/drivers/qmimodem/sms.c b/drivers/qmimodem/sms.c
index 2e962429..485d2820 100644
--- a/drivers/qmimodem/sms.c
+++ b/drivers/qmimodem/sms.c
@@ -610,6 +610,15 @@ static void get_msg_protocol(struct ofono_sms *sms)
 				get_msg_protocol_cb, sms, NULL);
 }
 
+static void event_update(struct qmi_result *result, void *user_data)
+{
+	struct ofono_sms *sms = user_data;
+
+	DBG("");
+
+	get_msg_list(sms);
+}
+
 static void event_notify(struct qmi_result *result, void *user_data)
 {
 	struct ofono_sms *sms = user_data;
@@ -687,6 +696,10 @@ static void set_routes_cb(struct qmi_result *result, void *user_data)
 	 * query which mode is active.
 	 */
 	get_msg_protocol(sms);
+
+
+	qmi_service_register(data->wms, QMI_SERVICE_UPDATE,
+					event_update, sms, NULL);
 }
 
 static void get_routes_cb(struct qmi_result *result, void *user_data)
diff --git a/drivers/qmimodem/voice.h b/drivers/qmimodem/voice.h
index bb98e693..e897be75 100644
--- a/drivers/qmimodem/voice.h
+++ b/drivers/qmimodem/voice.h
@@ -16,6 +16,7 @@
  */
 
 #define QMI_VOICE_IND_ALL_STATUS 0x2e
+#define QMI_VOICE_GET_ALL_STATUS 0x2f
 
 
 #define QMI_VOICE_PARAM_USS_DATA 0x01
diff --git a/drivers/qmimodem/voice_generated.c b/drivers/qmimodem/voice_generated.c
index 244a8d2d..aef79c4e 100644
--- a/drivers/qmimodem/voice_generated.c
+++ b/drivers/qmimodem/voice_generated.c
@@ -150,18 +150,26 @@ enum parse_error qmi_voice_answer_call_parse(
 	return err;
 }
 
-enum parse_error qmi_voice_ind_call_status(
+enum parse_error qmi_voice_call_status(
 		struct qmi_result *qmi_result,
 		struct qmi_voice_all_call_status_ind *result)
 {
 	int err = NONE;
 	int offset;
 	uint16_t len;
+	bool ind = TRUE;
 	const struct qmi_voice_remote_party_number *remote_party_number;
 	const struct qmi_voice_call_information *call_information;
 
 	/* mandatory */
 	call_information = qmi_result_get(qmi_result, 0x01, &len);
+
+	/* This is so ugly! but TLV for indicator and response is different */
+	if (!call_information) {
+		call_information = qmi_result_get(qmi_result, 0x10, &len);
+		ind = FALSE;
+	}
+
 	if (call_information)
 	{
 		/* verify the length */
@@ -177,7 +185,8 @@ enum parse_error qmi_voice_ind_call_status(
 		return MISSING_MANDATORY;
 
 	/* mandatory */
-	remote_party_number = qmi_result_get(qmi_result, 0x10, &len);
+	remote_party_number = qmi_result_get(qmi_result, ind ? 0x10 : 0x11, &len);
+
 	if (remote_party_number) {
 		const struct qmi_voice_remote_party_number_instance *instance;
 		int instance_size = sizeof(struct qmi_voice_remote_party_number_instance);
diff --git a/drivers/qmimodem/voice_generated.h b/drivers/qmimodem/voice_generated.h
index 471b52ea..dc238efd 100644
--- a/drivers/qmimodem/voice_generated.h
+++ b/drivers/qmimodem/voice_generated.h
@@ -106,7 +106,7 @@ struct qmi_voice_all_call_status_ind {
 	const struct qmi_voice_remote_party_number_instance *remote_party_number[16];
 };
 
-enum parse_error qmi_voice_ind_call_status(
+enum parse_error qmi_voice_call_status(
 		struct qmi_result *qmi_result,
 		struct qmi_voice_all_call_status_ind *result);
 
diff --git a/drivers/qmimodem/voicecall.c b/drivers/qmimodem/voicecall.c
index cfc6f0b9..d6041a09 100644
--- a/drivers/qmimodem/voicecall.c
+++ b/drivers/qmimodem/voicecall.c
@@ -66,7 +66,7 @@ static void all_call_status_ind(struct qmi_result *result, void *user_data)
 	int size = 0;
 	struct qmi_voice_all_call_status_ind status_ind;
 
-	if (qmi_voice_ind_call_status(result, &status_ind) != NONE) {
+	if (qmi_voice_call_status(result, &status_ind) != NONE) {
 		DBG("Parsing of all call status indication failed");
 		return;
 	}
@@ -128,6 +128,17 @@ static void all_call_status_ind(struct qmi_result *result, void *user_data)
 	ofono_call_list_notify(vc, &vd->call_list, calls);
 }
 
+static void event_update(struct qmi_result *result, void *user_data)
+{
+	struct ofono_voicecall *vc = user_data;
+	struct voicecall_data *data = ofono_voicecall_get_data(vc);
+
+	DBG("");
+
+	qmi_service_send(data->voice, QMI_VOICE_GET_ALL_STATUS, NULL,
+				all_call_status_ind, vc, NULL);
+}
+
 static void create_voice_cb(struct qmi_service *service, void *user_data)
 {
 	struct ofono_voicecall *vc = user_data;
@@ -155,6 +166,9 @@ static void create_voice_cb(struct qmi_service *service, void *user_data)
 	qmi_service_register(data->voice, QMI_VOICE_IND_ALL_STATUS,
 			     all_call_status_ind, vc, NULL);
 
+	qmi_service_register(data->voice, QMI_SERVICE_UPDATE,
+					event_update, vc, NULL);
+
 	ofono_voicecall_register(vc);
 }
 
-- 
2.27.0

